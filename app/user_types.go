// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "amc": Application User Types
//
// Command:
// $ goagen
// --design=github.com/citrusleaf/amc/api_design
// --out=$(GOPATH)/src/github.com/citrusleaf/amc/temp
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
)

// nodeSeed user type.
type nodeSeed struct {
	// Node Host. Valid DNS, IPv4 or IPv6 value
	Host *string `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// Node's port
	Port *int `form:"port,omitempty" json:"port,omitempty" xml:"port,omitempty"`
	// Node's TLS name
	TLSName *string `form:"tlsName,omitempty" json:"tlsName,omitempty" xml:"tlsName,omitempty"`
}

// Validate validates the nodeSeed type instance.
func (ut *nodeSeed) Validate() (err error) {
	if ut.Host == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "host"))
	}
	if ut.Port == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "port"))
	}
	if ut.Port != nil {
		if *ut.Port < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.port`, *ut.Port, 0, true))
		}
	}
	if ut.Port != nil {
		if *ut.Port > 65535 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.port`, *ut.Port, 65535, false))
		}
	}
	return
}

// Publicize creates NodeSeed from nodeSeed
func (ut *nodeSeed) Publicize() *NodeSeed {
	var pub NodeSeed
	if ut.Host != nil {
		pub.Host = *ut.Host
	}
	if ut.Port != nil {
		pub.Port = *ut.Port
	}
	if ut.TLSName != nil {
		pub.TLSName = ut.TLSName
	}
	return &pub
}

// NodeSeed user type.
type NodeSeed struct {
	// Node Host. Valid DNS, IPv4 or IPv6 value
	Host string `form:"host" json:"host" xml:"host"`
	// Node's port
	Port int `form:"port" json:"port" xml:"port"`
	// Node's TLS name
	TLSName *string `form:"tlsName,omitempty" json:"tlsName,omitempty" xml:"tlsName,omitempty"`
}

// Validate validates the NodeSeed type instance.
func (ut *NodeSeed) Validate() (err error) {
	if ut.Host == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "host"))
	}

	if ut.Port < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.port`, ut.Port, 0, true))
	}
	if ut.Port > 65535 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.port`, ut.Port, 65535, false))
	}
	return
}
